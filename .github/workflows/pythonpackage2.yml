name: Python package v2

on:
  push:
    branches: 
      - main
      - dev
  pull_request:
    branches: 
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9"]

    steps:
    - uses: actions/checkout@v2

    - name: Set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Load cached Poetry installation
      uses: actions/cache@v2
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-1  # increment to reset cache

    - name: Install Poetry
      uses: snok/install-poetry@v1.1.1
      with:
          virtualenvs-create: true
          virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-1

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install library
      run: poetry install --no-interaction

    - name: Run style checks
      run: |
        source .venv/bin/activate
        flake8 kmermaid/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 kmermaid/ --count --max-complexity=5 --max-line-length=88 --ignore=E203 --statistics --docstring-style=SPHINX --strictness=short
        black kmermaid/ --check
        mypy kmermaid/

    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest -c pyproject.toml

    - name: Run safety checks
      run: |
        poetry check
        source .venv/bin/activate
        # safety check --full-report
        bandit -ll --recursive kmermaid/
