#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------
#
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 20180328
# Project: Complementary Oligo Design
# Description: identify unique k-mers in the records of a FASTA file.
#
# Changelog:
#  v0.0.1 - 20180328: first version.
#
# ------------------------------------------------------------------------------


# DEPENDENCIES =================================================================

import argparse
from kman import old as kman
import multiprocessing
import os
import sys
import tempfile

# PARAMETERS ===================================================================

# Add script description
parser = argparse.ArgumentParser(
    description="""
Extract all k-mer (i.e., k-characters substrings) that appear in the input
sequence only once.
""",
    formatter_class=argparse.RawDescriptionHelpFormatter,
)

# Add mandatory arguments
parser.add_argument(
    "input",
    type=str,
    nargs=1,
    help="""
	Path to input fasta file.""",
)
parser.add_argument(
    "output",
    type=str,
    nargs=1,
    help="""
	Path to output fasta file.""",
)

# Add arguments with default value
parser.add_argument(
    "-k",
    type=int,
    nargs=1,
    required=True,
    help="""Oligonucleotide (substring) length in nucleotides.""",
)
parser.add_argument(
    "-b", type=int, nargs=1, help="""Number of kmers per batch.""", default=[0]
)
parser.add_argument(
    "-t",
    type=int,
    nargs=1,
    help="""Number of threads for parallelization.""",
    default=[1],
)
parser.add_argument(
    "-T",
    type=str,
    nargs=1,
    help="""Path to temporary folder.""",
    default=[tempfile.gettempdir()],
)
parser.add_argument(
    "-d",
    "--delim",
    type=str,
    nargs=1,
    metavar="sep",
    help='''Delimiter between key and value in FASTA header description.
    Default: "="''',
    default=["="],
)

# Add flags
parser.add_argument(
    "-R",
    dest="do_reverse",
    action="store_const",
    const=True,
    default=False,
    help="""Reverse complement sequences.""",
)
parser.add_argument(
    "-N",
    dest="allow_non_ACTUG",
    action="store_const",
    const=True,
    default=False,
    help="""Allow non ACTUG characters
	(RYKMSWBDHVN) in the unique k-mers.""",
)

# Version flag
version = "0.0.1"
parser.add_argument(
    "--version",
    action="version",
    version="%s v%s"
    % (
        sys.argv[0],
        version,
    ),
)

# Parse arguments
args = parser.parse_args()

# Additional checks ------------------------------------------------------------

assert_msg = "path to an existing fasta file expected, file not found: '%s'" % (
    args.input[0]
)
assert os.path.isfile(args.input[0]), assert_msg

if args.t[0] <= 0:
    args.t[0] = 1
if args.t[0] > multiprocessing.cpu_count():
    args.t[0] = multiprocessing.cpu_count()
if not os.path.isdir(args.T[0]):
    os.mkdir(args.T[0])

# RUN ==========================================================================

reverseAB = None
if args.do_reverse:
    reverseAB = ["ACTUGN", "TGAACN"]

tempfile.tempdir = args.T[0]
kman.Kmer.uniq_fasta(
    args.k[0],
    args.input[0],
    args.output[0],
    klim=args.b[0],
    threads=args.t[0],
    fasta_delim=args.delim[0],
    allow_non_ACTUG=args.allow_non_ACTUG,
    progress=True,
    reverseAB=reverseAB,
)

print(" Done.")

# END ==========================================================================

################################################################################
